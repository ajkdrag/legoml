from typing import Protocol, runtime_checkable
from legoml.core.state import FitState


@runtime_checkable
class Callback(Protocol):
    """Lifecycle hooks for side effects. All methods are optional."""

    # Fit-level
    def on_fit_start(self, state: FitState) -> None: ...
    def on_fit_end(self, state: FitState) -> None: ...

    # Epoch-level
    def on_train_epoch_start(self, state: FitState) -> None: ...
    def on_train_epoch_end(self, state: FitState) -> None: ...
    def on_eval_epoch_start(self, state: FitState) -> None: ...
    def on_eval_epoch_end(self, state: FitState) -> None: ...

    # Batch-level
    def on_train_batch_start(self, state: FitState) -> None: ...
    def on_train_batch_end(self, state: FitState) -> None: ...
    def on_eval_batch_start(self, state: FitState) -> None: ...
    def on_eval_batch_end(self, state: FitState) -> None: ...


class CallbackBase:
    """Convenience no-op base that satisfies the protocol."""

    def on_fit_start(self, state: FitState): ...
    def on_fit_end(self, state: FitState): ...
    def on_train_epoch_start(self, state: FitState): ...
    def on_train_epoch_end(self, state: FitState): ...
    def on_eval_epoch_start(self, state: FitState): ...
    def on_eval_epoch_end(self, state: FitState): ...
    def on_train_batch_start(self, state: FitState): ...
    def on_train_batch_end(self, state: FitState): ...
    def on_eval_batch_start(self, state: FitState): ...
    def on_eval_batch_end(self, state: FitState): ...
